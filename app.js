// Generated by CoffeeScript 1.6.3
(function() {
  var app, coffee_middleware, express, fetch_user, io, port, remove_user, server, update_user, users;

  coffee_middleware = require('coffee-middleware');

  express = require('express');

  app = express();

  server = require('http').createServer(app);

  io = require('socket.io').listen(server);

  io.configure(function() {
    io.set("transports", ["xhr-polling"]);
    return io.set("polling duration", 10);
  });

  app.configure(function() {
    app.set('views', "" + __dirname + "/views");
    app.set('view engine', 'jade');
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(require('stylus').middleware({
      src: "" + __dirname + "/public"
    }));
    app.use(coffee_middleware({
      src: "" + __dirname + "/public",
      compress: true
    }));
    app.use(app.router);
    return app.use(express["static"]("" + __dirname + "/public"));
  });

  app.get('/', function(req, res) {
    console.log("Routing request");
    return res.render('index.jade', {
      title: 'Chatroom',
      users: users
    });
  });

  users = [];

  fetch_user = function(id) {
    var u, _i, _len;
    for (_i = 0, _len = users.length; _i < _len; _i++) {
      u = users[_i];
      if (u.id === id) {
        return u;
      }
    }
  };

  remove_user = function(id) {
    return users.remove(users.indexOf(id));
  };

  update_user = function(user) {
    var i, u, _i, _len;
    for (i = _i = 0, _len = users.length; _i < _len; i = ++_i) {
      u = users[i];
      if (u.id === user.id) {
        users[i] = user;
        return user;
      }
    }
    return void 0;
  };

  io.sockets.on('connection', function(socket) {
    socket.on('join', function(data) {
      console.info('Join Event:', data.user_name);
      users.push(data);
      return io.sockets.emit('user joined', {
        user: data,
        users: users
      });
    });
    socket.on('chat message', function(data) {
      console.info('Message sent:', data.message);
      return io.sockets.emit('chat message', {
        id: socket.id,
        message: data.message
      });
    });
    socket.on('user name update', function(data) {
      console.info("Switching user_name from " + data.old_user_name + " to " + data.new_user_name);
      update_user(data.user);
      return io.sockets.emit('user updated', {
        user: data.user,
        users: users,
        message: "" + data.old_user_name + " has changed their username to " + data.new_user_name
      });
    });
    return socket.on('disconnect', function(data) {
      remove_user(users.indexOf(socket.id));
      return io.sockets.emit('user disconnected', {
        id: socket.id,
        users: users
      });
    });
  });

  port = process.env.PORT || 3000;

  server.listen(port);

  Array.prototype.remove = function(from, to) {
    var rest;
    rest = this.slice((to || from) + 1 || this.length);
    this.length = (from < 0 ? this.length + from : from);
    return this.push.apply(this, rest);
  };

}).call(this);
